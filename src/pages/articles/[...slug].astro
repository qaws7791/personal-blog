---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import { readingTime } from "@lib/utils";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Giscus from "@components/Giscus.astro";
import GithubCallout from "@components/GithubCallout.astro";

export async function getStaticPaths() {
  const posts = (await getCollection("articles"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"articles">;

const posts = (await getCollection("articles"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings } = await post.render();
---

<Layout title={post.data.title} description={post.data.description}>
  <Container>
    <article class="">
      <header class="animate my-10 space-y-1">
        <div class="animate text-text-disabled mt-2 flex items-center gap-2">
          <time class="font-base text-sm">
            {
              post.data.date.toLocaleDateString("ko-KR", {
                month: "long",
                day: "2-digit",
                year: "numeric",
              })
            }
          </time>
          <span class="font-base text-sm">â€¢</span>
          <div class="font-base flex items-center gap-1 text-sm">
            {readingTime(post.body)}
          </div>
        </div>
        <h1 class="text-3xl font-semibold">
          {post.data.title}
        </h1>
        <p class="text-text-secondary text-lg">
          {post.data.description}
        </p>
        <div class="not-prose flex gap-1">
          {
            post.data.tags.map((tag) => (
              <a
                href={`/tags/${tag}`}
                class="text-text-secondary px-3 py-1 text-sm hover:underline"
              >
                #{tag}
              </a>
            ))
          }
        </div>
      </header>
      {headings.length > 0 && <TableOfContents headings={headings} />}
      <section
        class="animate content prose prose-neutral mt-8 max-w-full dark:prose-invert prose-headings:font-semibold prose-img:mx-auto prose-img:my-auto"
      >
        <Content components={{ callout: GithubCallout }} />
      </section>
      <section class="animate">
        <div class="mt-24">
          <PostNavigation prevPost={prevPost} nextPost={nextPost} />
        </div>
        <div class="mt-24">
          <Giscus />
        </div>
      </section>
    </article>
  </Container>
</Layout>
<script>
  /**
   * @params {HTMLCollectionOf<HTMLElement>} graphs
   */

  async function renderDiagrams() {
    const graphs = document.getElementsByClassName("mermaid");
    console.log("graphs", graphs);
    if (document.getElementsByClassName("mermaid").length === 0) {
      return;
    }
    const { default: mermaid } = await import("mermaid");
    mermaid.initialize({
      startOnLoad: false,
      fontFamily: "var(--sans-font)",
      // @ts-ignore This works, but TS expects a enum for some reason
      theme:
        document.documentElement.dataset.theme === "dark" ? "dark" : "default",
      look: "handDrawn",
    });
    Array.from(graphs).forEach(async (graph, index) => {
      const content = graph.getAttribute("data-content");
      if (!content) return;
      const id = "mermaid-graph-" + index;
      const result = await mermaid.render(id, content);
      graph.innerHTML = result.svg;
    });
  }

  renderDiagrams();
  document.addEventListener("astro:after-swap", () => renderDiagrams());
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === "data-theme") {
        renderDiagrams();
      }
    });
  });
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["data-theme"],
  });
</script>
